require('dotenv').config(); // to read the environment file
const formidable = require('formidable'); // to deal with form data
const { v4: uuidv4 } = require('uuid'); // to generate a unique id always
const https = require('https'); // to secure the communication with paytm server

// Downloaded package from paytm
const PaytmChecksum = require('./PaytmChecksum');

exports.payment = (req, res) => {
    const {
        amount,
        email,
        mobileNo
    } = req.body;

    /*
    (1) We need to prepare the data to get the checksum generated (coded information neede by paytm)
        a. data given by user
        b. the API keys from the .env file
        c. checksum will be generated by the Downloaded package from paytm
    (2) Get checksum ready and send it back to the FE
    */

   const totalAmount = JSON.stringify(amount);

   var params = {};
   params['MID'] = process.env.PAYTM_MID;
   params['WEBSITE'] = process.env.PAYTM_WEBSITE;
   params['CHANNEL_ID'] = process.env.PAYTM_CHANNEL_ID;
   params['INDUSTRY_TYPE_ID'] = process.env.PAYTM_INDUSTRY_TYPE_ID;
   params['ORDER_ID'] = uuidv4();
   params['CUST_ID'] = process.env.PAYTM_CUST_ID;
   params['TXN_AMOUNT'] = totalAmount;
   params['CALLBACK_URL'] = 'http://localhost:3000/api/callback'; // URL to which you will be redirected to, once your payment process is complete on the paytm website.
   params['EMAIL'] = email;
   params['MOBILE_NO'] = mobileNo;

   let paytmCheckSum = PaytmChecksum.generateSignature(params, process.env.PAYTM_MERCHANT_KEY);

   paytmCheckSum.then(response => {
        let paytmCheckSumResponse = {
            ...params,
            "CHECKSUMHASH": response
        };
        res.json({ checkSumResponse: paytmChecksumResponse });
    }).catch(error => {
        res.status(500).json({
            message: "Error in payment",
            error: error
        });
    });

}

exports.callback = (req, res) => {
    // creating a new form
    const form = new formidable.IncomingForm();

    form.parse(req, (error, fields, file) => {
      if (error) {
         console.log(error);
         res.status(500).json({ error });
      }
      let checkSumHash = fields.CHECKSUMHASH;
      delete fields.CHECKSUMHASH;

      // verify the signature
      var isVerifySignature = PaytmChecksum.verifySignature(
         fields,
         process.env.PAYTM_MERCHANT_KEY,
         checkSumHash
      )

      if (isVerifySignature) {
         // response is valid
         // get the transaction status
         // any communication with Paytm, server has to be secure

         var params = {};
         params["MID"] = fields.MID;
         params["ORDER_ID"] = fields.ORDERID;

         PaytmChecksum.generateSignature(
            params,
            process.env.PAYTM_MERCHANT_KEY
         ).then(checksum => {
            // go to paytm server and get the payment status 
            params["CHECKSUMHASH"] = checksum;
            var data = JSON.stringify(params);
            var options = {
               hostname: "securegw-stage.paytm.in",
               port: 443,
               path: "/order/status",
               method: "POST",
               headers: {
                  'Content-Type': "application/json",
                  'Content-Length': data.length
               }
            };

            var response = "";

            // securely check the status of payment from paytm
            var request = https.request(options, (responseFromPaytm) => {
               responseFromPaytm.on('data', (chunk) => {
                  response += chunk;
               });
               responseFromPaytm.on('end', () => {
                    if (response.STATUS == 'TXN_SUCCESS') {
                        // Send back the success page
                        res.sendFile(__dirname + '/success.html');
                    } else {
                        // Send back the failure page
                        res.sendFile(__dirname + '/failure.html');
                    }
               });
            });
            request.write(data);
            request.end();
         })
      } else {
         console.log("Checksum Mismatch");
         res.status(500).json({ error: "Its a hacker !" });
      }
    });
}